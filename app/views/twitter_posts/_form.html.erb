<h2>Step 1</h2>

<%= form_with model: @twitter_post, local: true  do |form| %>
  <% if @twitter_post.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(twitter_post.errors.count, "error") %> prohibited this twitter_post from being saved:</h2>
      <ul>
      <% twitter_post.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form-group">
    <p>背景画像選択</p>
    <!-- 背景画像はラジオボタンで選択形式 -->
<<<<<<< Updated upstream
    <label><%= form.radio_button :kind, "nigaoe_napoleon_horse" %><%= image_tag 'nigaoe_napoleon_horse.png', width: '100' %></label>
    <label><%= form.radio_button :kind, "red" %><%= image_tag 'red.jpg', width: '100' %></label>
=======
    <label><%= form.radio_button :kind, "mother_nagusameru_boy" %><%= image_tag 'mother_nagusameru_boy.jpg', width: '100', class: 'selection-img' %></label>
    <label><%= form.radio_button :kind, "nigaoe_napoleon_horse" %><%= image_tag 'nigaoe_napoleon_horse.jpg', width: '100', class: 'selection-img' %></label>
>>>>>>> Stashed changes
  </div>

  <div>
    <h2>Step 2</h2>
  </div>

  <div class="form-group">
    <p>画像内の文字入力</p>
    <%= form.text_area :content, class:"form-control", id:"text"  %>
    <select id="voice-select"></select>
    <button id="speak-btn">
      <%= fa_icon("volume-up") %>
    </button>
  </div>

  <div class="actions">
    <%= form.submit "画像を確認する（まだツイートされません）", id: 'submit', class:"square_btn" %>
  </div>
<% end %>


<script>
  const text        = document.querySelector('#text')
  const voiceSelect = document.querySelector('#voice-select')
  const speakBtn    = document.querySelector('#speak-btn')

  // selectタグの中身を声の名前が入ったoptionタグで埋める
  function appendVoices() {
    // ①　使える声の配列を取得
    // 配列の中身は SpeechSynthesisVoice オブジェクト
    const voices = speechSynthesis.getVoices()
    voiceSelect.innerHTML = ''
    voices.forEach(voice => { //　アロー関数 (ES6)
      // 日本語と英語以外の声は選択肢に追加しない。
      if(!voice.lang.match('ja|en-US')) return
      const option = document.createElement('option')
      option.value = voice.name
      option.text  = `${voice.name} (${voice.lang})` //　テンプレートリテラル (ES6)
      option.setAttribute('selected', voice.default)
      voiceSelect.appendChild(option)
    });
  }

  appendVoices()

  // ② 使える声が追加されたときに着火するイベントハンドラ。
  // Chrome は非同期に(一個ずつ)声を読み込むため必要。
  speechSynthesis.onvoiceschanged = e => {
    appendVoices()
  }

  speakBtn.addEventListener('click', function() {
    // 発言を作成
    const uttr = new SpeechSynthesisUtterance(text.value)
    // ③ 選択された声を指定
    uttr.voice = speechSynthesis
      .getVoices()
      .filter(voice => voice.name === voiceSelect.value)[0]
    // 発言を再生 (発言キュー発言に追加)
    speechSynthesis.speak(uttr)
  })
</script>
